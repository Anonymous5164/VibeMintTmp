model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  walletAddress String? @unique // Web3: Wallet address for transactions
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations:
  posts Post[]
  comments Comment[]
  likes Like[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  notifications Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")

  nfts NFT[] // Web3: User can own multiple NFTs
  bids Bid[] // Web3: User can place multiple bids
}

model Post {
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes Like[]
  notifications Notification[]

  nft NFT? @relation(fields: [id], references: [postId], onDelete: Cascade) // Web3: A post can be minted as NFT
}

model NFT {
  id String @id @default(cuid())
  postId String @unique // Ensures one NFT per post
  ownerId String // Web3: User who owns this NFT
  tokenId String @unique // Web3: On-chain token ID
  contractAddress String // Web3: Address of the smart contract
  chain Chain // Web3: Enum for supported chains
  price Float? // Web3: Selling price (if set)
  forSale Boolean @default(true) // Web3: Is NFT currently for sale?
  createdAt DateTime @default(now())

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bids Bid[] // Web3: Bids placed on this NFT
}

enum Chain {
  BASE
  ARBITRUM
}

model Bid {
  id String @id @default(cuid())
  nftId String // Web3: NFT being bid on
  bidderId String // Web3: User placing the bid
  amount Float // Web3: Bid amount
  status BidStatus @default(PENDING) // Web3: Status of bid
  createdAt DateTime @default(now())

  // Relations
  nft NFT @relation(fields: [nftId], references: [id], onDelete: Cascade)
  bidder User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Comment {
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
  @@unique([userId, postId])
}

model Follows {
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relations
  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId])
  @@id([followerId, followingId])
}

model Notification {
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  postId String?
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
